services:
  # 분산 시스템을 위한 중앙 집중식 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: coordinator

    networks:
      - shared-net

    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # 분산 메시징 시스템
  kafka:
    image: confluentinc/cp-kafka:7.2.15
    container_name: kafka

    networks:
      - shared-net
    ports:
      - "${KAFKA_PORT}:29092"
    depends_on:
      - zookeeper

    environment:
      KAFKA_BROKER_ID: 1 # 브로커 ID
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Kafka 내부에서 사용하는 topic replication factor
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data

    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 30

  # 스트림 쿼리 처리
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    container_name: ksqldb-server

    networks:
      - shared-net
    ports:
      - "${KSQLDB_PORT}:8088"
    depends_on:
      - kafka

    environment:
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_HOST_NAME: ksqldb-server
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://apicurio:8080/apis/ccompat/v6

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/info"]
      interval: 10s
      timeout: 5s
      retries: 10

  # 스키마 레지스터리 - 메시지 형식 구조 관리
  apicurio:
    image: apicurio/apicurio-registry-mem:2.6.2.Final
    container_name: schema_registry

    networks:
      - shared-net
    ports:
      - "${SCHEMA_REGISTRY_PORT}:8080"

    environment:
      REGISTRY_LOG_LEVEL: DEBUG
      ENABLE_CCOMPAT_LEGACY_ID_MODE: true

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/apis/ccompat/v6/subjects"]
      interval: 10s
      timeout: 5s
      retries: 20

  # CDC - 변경 데이터 캡처
  debezium:
    image: debezium
    container_name: cdc
    build:
      context: .
      dockerfile: Dockerfile.cdc

    networks:
      - shared-net
    ports:
      - "${CDC_PORT}:8083" # 커넥터를 등록, 모니터링하는 포트
    depends_on:
      kafka:
        condition: service_started
      apicurio:
        condition: service_healthy

    environment:
      ENABLE_APICURIO_CONVERTERS: "true"

      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1

      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses

      # Avro Converter 설정
      KEY_CONVERTER: io.apicurio.registry.utils.converter.AvroConverter
      VALUE_CONVERTER: io.apicurio.registry.utils.converter.AvroConverter

      CONNECT_KEY_CONVERTER: io.apicurio.registry.utils.converter.AvroConverter
      CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_URL: http://apicurio:8080/apis/registry/v2
      CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_AUTO-REGISTER: true
      CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_FIND-LATEST: true

      CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_USE_ID: true
      CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_USE_ID: true

      CONNECT_VALUE_CONVERTER: io.apicurio.registry.utils.converter.AvroConverter
      CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_URL: http://apicurio:8080/apis/registry/v2
      CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_AUTO-REGISTER: true
      CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_FIND-LATEST: true

      CONNECT_SCHEMA_NAME_ADJUSTMENT_MODE: avro
    volumes:
      - ./config/logging/log4j.properties:/kafka/config/log4j.properties

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 10s
      timeout: 5s
      retries: 50
    cpus: ".5"
    mem_limit: 1g

  # Debezium 커넥터 초기화 스크립트
  connector-init:
    image: alpine:3.20
    container_name: connector-init

    entrypoint: >
      sh -c "
        apk add --no-cache curl gettext jq;
        echo 'Register connector';
        sh ./init/register.sh;"

    networks:
      - shared-net
    depends_on:
      debezium:
        condition: service_healthy
      rdb:
        condition: service_healthy

    env_file:
      - .env
    environment:
      PG_HOST: rdb
      PG_PORT: 5432
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      CDC_HOST: debezium
      CDC_PORT: 8083
    volumes:
      - ./config/connectors:/init

  # ksql 쿼리 초기화 스크립트
  ksql-init:
    image: confluentinc/ksqldb-cli:latest
    container_name: ksqldb-cli-init

    entrypoint: >
      bash -c "
        echo 'Waiting 120 seconds for connector-init to complete...';
        sleep 120;
        echo 'end'
        for f in /init-sqls/*.sql; do
          echo Running \$$f;
          ksql http://ksqldb-server:8088 < \$$f;
        done
      "

    networks:
      - shared-net
    depends_on:
      ksqldb-server:
        condition: service_healthy
      connector-init:
        condition: service_completed_successfully

    volumes:
      - ./data/ksqldb:/init-sqls

networks:
  shared-net:
    name: shared-net
    driver: bridge

volumes:
  kafka-data:
    driver: local
