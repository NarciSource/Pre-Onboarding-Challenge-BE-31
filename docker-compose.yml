version: "3.8"

services:
  # 커맨드 데이터베이스
  rds:
    image: postgres:latest
    container_name: rds
    networks:
      - network
    ports:
      - "${PG_PORT}:5432"
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USERNAME}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - ./data:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql/data
    # Debezium CDC를 위한 설정 추가
    command: # postgresql.conf의 설정을 덮어쓰기
      - "postgres"
      - "-c"
      - "wal_level=logical" # Debezium이 이벤트를 캡처할 수 있도록
      - "-c"
      - "max_wal_senders=10" # 복제 클라이언트 수
      - "-c"
      - "max_replication_slots=10" # Debezium이 슬롯을 만들 수 있게

  # 쿼리 데이터베이스
  mongo:
    image: mongo:latest
    container_name: mongo
    networks:
      - network
    ports:
      - "${MONGO_PORT}:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongo-data:/data/db

  mongo-init:
    image: mongo:latest
    networks:
      - network
    depends_on:
      - mongo
    env_file:
      - .env
    environment:
      - MONGO_HOST=mongo
    volumes:
      - ./config/mongo-init/init-replica.js:/init-replica.js:ro
    entrypoint: >
      bash -c "apt-get update && apt-get install -y gettext && envsubst < /init-replica.js | mongosh --host mongo"

  # e-commerce 서버 애플리케이션
  server:
    image: e-commerce-server:${VERSION}
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile.server
    networks:
      - network
    ports:
      - "${PORT}:3000"
    depends_on:
      - rds
      - mongo
      - kafka
    env_file:
      - .env
    environment:
      - PG_HOST=rds
      - PG_PORT=5432
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092

  # 프로젝션하는 컨슈머 서비스
  consumer:
    image: projection-consumer:${CONSUMER_VERSION}
    container_name: consumer
    build:
      context: .
      dockerfile: Dockerfile.consumer
    networks:
      - network
    ports:
      - "${WORKER_PORT}:3001"
    depends_on:
      - rds
      - mongo
      - kafka
    env_file:
      - .env
    environment:
      - PG_HOST=rds
      - PG_PORT=5432
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092

  # 분산 시스템을 위한 중앙 집중식 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: coordinator
    networks:
      - network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # 분산 메시징 시스템
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - network
    ports:
      - "${KAFKA_PORT}:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1 # 브로커 ID
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Kafka 내부에서 사용하는 topic replication factor
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Kafka UI - 카프카 모니터링 및 관리용 웹 인터페이스
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      - network
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # CDC - 변경 데이터 캡처
  debezium:
    image: debezium/connect:2.7.3.Final
    container_name: cdc
    networks:
      - network
    ports:
      - "${CDC_PORT}:8083" # 커넥터를 등록, 모니터링하는 포트
    depends_on:
      - kafka
      - rds
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:9092
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      ENABLE_DEBEZIUM_SCRIPTING: "true"
      CONNECT_METRICS_ENABLED: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium

  # Debezium 커넥터 초기화 스크립트
  connector-init:
    image: bitnami/kubectl:latest
    container_name: connector-init
    networks:
      - network
    depends_on:
      - debezium
      - rds
    env_file:
      - .env
    environment:
      PG_HOST: rds
      PG_PORT: 5432
      CDC_HOST: debezium
      CDC_PORT: 8083
    volumes:
      - ./config/connectors:/connectors
    entrypoint: >
      sh -c "
        echo 'Waiting for Debezium to be ready...';
        until curl -s http://debezium:8083/connectors; do sleep 2; done;
        echo 'Register connector';
        sh ./connectors/register.sh;"

networks:
  network:
    driver: bridge

volumes:
  pg-data:
    driver: local
  mongo-data:
    driver: local
  kafka-data:
    driver: local
