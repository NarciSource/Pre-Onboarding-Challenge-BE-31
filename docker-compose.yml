services:
  # 커맨드 데이터베이스
  rdb:
    image: postgres:latest
    container_name: rdb

    # Debezium CDC를 위한 설정 추가
    command: # postgresql.conf의 설정을 덮어쓰기
      - "postgres"
      - "-c"
      - "wal_level=logical" # Debezium이 이벤트를 캡처할 수 있도록
      - "-c"
      - "max_wal_senders=10" # 복제 클라이언트 수
      - "-c"
      - "max_replication_slots=10" # Debezium이 슬롯을 만들 수 있게

    networks:
      - shared-net
    ports:
      - "${PG_PORT}:5432"

    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USERNAME}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - ./data/rdb:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 10
    cpus: ".5"
    mem_limit: 1g

  # 쿼리 데이터베이스
  mongo:
    image: mongo:latest
    container_name: mongo

    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]

    networks:
      - shared-net
    ports:
      - "${MONGO_PORT}:27017"

    volumes:
      - mongo-data:/data/db

    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "rs.status().ok"]
      interval: 10s
      retries: 10
      start_period: 30s
    cpus: ".5"
    mem_limit: 1g

  # 몽고디비 레플리카 설정
  mongo-init:
    image: mongo:latest
    container_name: mongo-init

    entrypoint: >
      bash -c "apt-get update && apt-get install -y gettext && envsubst < /init-replica.js | mongosh --host mongo"

    networks:
      - shared-net
    depends_on:
      - mongo

    env_file:
      - .env
    environment:
      - MONGO_HOST=mongo
    volumes:
      - ./config/mongo-init/init-replica.js:/init-replica.js:ro

  # 검색 데이터베이스
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch

    command: >
      bash -c '
        bin/elasticsearch-plugin install analysis-nori || true;
        /usr/local/bin/docker-entrypoint.sh elasticsearch
      '

    networks:
      - shared-net
    ports:
      - "${ES_PORT}:9200"

    environment:
      discovery.type: "single-node"
      xpack.security.enabled: false
      ELASTIC_PASSWORD: ${ES_PASSWORD}
    volumes:
      - es-data:/usr/share/elasticsearch/data

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      retries: 100
      start_period: 60s
    cpus: ".5"
    mem_limit: 1g

  # ElasticSearch 인덱스 템플릿 등록 스크립트
  elasticsearch-init:
    image: alpine:3.20
    container_name: elasticsearch-init

    entrypoint: >
      sh -c "
        apk add --no-cache curl gettext jq;
        echo 'Register index templates';
        sh ./init/register.sh;"

    networks:
      - shared-net
    depends_on:
      elasticsearch:
        condition: service_healthy

    env_file:
      - .env
    environment:
      ES_HOST: elasticsearch
      ES_PORT: 9200
    volumes:
      - ./config/elasticsearch:/init

  # 캐싱 데이터베이스
  redis:
    image: redis:latest
    container_name: redis

    networks:
      - shared-net
    ports:
      - "${REDIS_PORT}:6379"

    volumes:
      - redis-data:/data

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 10
      start_period: 10s

  # e-commerce 서버 애플리케이션
  server:
    image: e-commerce-server:${VERSION}
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile.server

    networks:
      - shared-net
    ports:
      - "${PORT}:3000"
    depends_on:
      rdb:
        condition: service_healthy
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

    env_file:
      - .env
    environment:
      - PG_HOST=rdb
      - PG_PORT=5432
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092

  # 프로젝션하는 컨슈머 서비스
  projector:
    image: projection-docs:${PROJECTOR_VERSION}
    container_name: projector
    build:
      context: .
      dockerfile: Dockerfile.projector

    networks:
      - shared-net
    ports:
      - "${PROJECTOR_PORT}:3001"
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy

    env_file:
      - .env
    environment:
      - PG_HOST=rdb
      - PG_PORT=5432
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092

  # 인덱스 싱크 컨슈머 서비스
  sync:
    image: sync-index:${SYNC_VERSION}
    container_name: sync
    build:
      context: .
      dockerfile: Dockerfile.sync

    networks:
      - shared-net
    ports:
      - "${SYNC_PORT}:3002"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy

    env_file:
      - .env
    environment:
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092

volumes:
  pg-data:
    driver: local
  mongo-data:
    driver: local
  es-data:
    driver: local
  redis-data:
    driver: local
