services:
  # 커맨드 데이터베이스
  rds:
    image: postgres:latest
    container_name: rds

    # Debezium CDC를 위한 설정 추가
    command: # postgresql.conf의 설정을 덮어쓰기
      - "postgres"
      - "-c"
      - "wal_level=logical" # Debezium이 이벤트를 캡처할 수 있도록
      - "-c"
      - "max_wal_senders=10" # 복제 클라이언트 수
      - "-c"
      - "max_replication_slots=10" # Debezium이 슬롯을 만들 수 있게

    networks:
      - shared-net
    ports:
      - "${PG_PORT}:5432"

    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USERNAME}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - ./data:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 10
    cpus: ".5"
    mem_limit: 1g

  # 쿼리 데이터베이스
  mongo:
    image: mongo:latest
    container_name: mongo

    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]

    networks:
      - shared-net
    ports:
      - "${MONGO_PORT}:27017"

    volumes:
      - mongo-data:/data/db

    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "rs.status().ok"]
      interval: 10s
      retries: 10
      start_period: 30s
    cpus: ".5"
    mem_limit: 1g

  # 몽고디비 레플리카 설정
  mongo-init:
    image: mongo:latest
    container_name: mongo-init

    entrypoint: >
      bash -c "apt-get update && apt-get install -y gettext && envsubst < /init-replica.js | mongosh --host mongo"

    networks:
      - shared-net
    depends_on:
      - mongo

    env_file:
      - .env
    environment:
      - MONGO_HOST=mongo
    volumes:
      - ./config/mongo-init/init-replica.js:/init-replica.js:ro

  # 검색 데이터베이스
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    container_name: elasticsearch

    command: >
      bash -c '
        bin/elasticsearch-plugin install analysis-nori || true;
        /usr/local/bin/docker-entrypoint.sh elasticsearch
      '

    networks:
      - shared-net
    ports:
      - "${ES_PORT}:9200"

    environment:
      discovery.type: "single-node"
      xpack.security.enabled: false
      ELASTIC_PASSWORD: ${ES_PASSWORD}
    volumes:
      - es-data:/usr/share/elasticsearch/data

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      retries: 20
      start_period: 60s
    cpus: ".5"
    mem_limit: 1g

  # e-commerce 서버 애플리케이션
  server:
    image: e-commerce-server:${VERSION}
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile.server

    networks:
      - shared-net
    ports:
      - "${PORT}:3000"
    depends_on:
      rds:
        condition: service_healthy
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started

    env_file:
      - .env
    environment:
      - PG_HOST=rds
      - PG_PORT=5432
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092

  # 프로젝션하는 컨슈머 서비스
  projector:
    image: projection-docs:${PROJECTOR_VERSION}
    container_name: projector
    build:
      context: .
      dockerfile: Dockerfile.projector

    networks:
      - shared-net
    ports:
      - "${PROJECTOR_PORT}:3001"
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_started

    env_file:
      - .env
    environment:
      - PG_HOST=rds
      - PG_PORT=5432
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092

  # 인덱스 싱크 컨슈머 서비스
  sync:
    image: sync-index:${SYNC_VERSION}
    container_name: sync
    build:
      context: .
      dockerfile: Dockerfile.sync

    networks:
      - shared-net
    ports:
      - "${SYNC_PORT}:3002"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started

    env_file:
      - .env
    environment:
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092

  # 분산 시스템을 위한 중앙 집중식 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: coordinator

    networks:
      - shared-net

    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # 분산 메시징 시스템
  kafka:
    image: confluentinc/cp-kafka:7.2.15
    container_name: kafka

    networks:
      - shared-net
    ports:
      - "${KAFKA_PORT}:29092"
    depends_on:
      - zookeeper

    environment:
      KAFKA_BROKER_ID: 1 # 브로커 ID
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Kafka 내부에서 사용하는 topic replication factor
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data

  # CDC - 변경 데이터 캡처
  debezium:
    image: debezium/connect:2.7.3.Final
    container_name: cdc

    networks:
      - shared-net
    ports:
      - "${CDC_PORT}:8083" # 커넥터를 등록, 모니터링하는 포트
    depends_on:
      - kafka

    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:9092
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      ENABLE_DEBEZIUM_SCRIPTING: "true"
      CONNECT_METRICS_ENABLED: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 10s
      timeout: 5s
      retries: 50
    cpus: ".5"
    mem_limit: 1g

  # Debezium 커넥터 초기화 스크립트
  connector-init:
    image: alpine:3.20
    container_name: connector-init

    entrypoint: >
      sh -c "
        apk add --no-cache curl gettext;
        echo 'Register connector';
        sh ./connectors/register.sh;"

    networks:
      - shared-net
    depends_on:
      debezium:
        condition: service_healthy

    env_file:
      - .env
    environment:
      PG_HOST: rds
      PG_PORT: 5432
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      CDC_HOST: debezium
      CDC_PORT: 8083
    volumes:
      - ./config/connectors:/connectors

networks:
  shared-net:
    name: shared-net
    driver: bridge

volumes:
  pg-data:
    driver: local
  mongo-data:
    driver: local
  es-data:
    driver: local
  kafka-data:
    driver: local
